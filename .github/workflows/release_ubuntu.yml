name: Build Ubuntu Libraries

# GitHub Actions workflow for building and packaging RadarSimLib on Ubuntu Linux.
#
# This workflow builds RadarSimLib across different build tiers (standard/free)
# and architectures (CPU/GPU). It provides comprehensive Linux coverage with
# both CPU-only and CUDA GPU-accelerated builds.
#
# Build Matrix:
# - Ubuntu Latest: GCC compiler, 4 builds (2 architectures × 2 tiers)
# - Architectures: CPU (x86_64), GPU (CUDA)
# - Build tiers: standard (full features), free (limited features)
# - Total builds: 4
#
# Features:
# - Comprehensive caching (apt, ccache)
# - CUDA toolkit setup for GPU builds
# - Build optimization with ccache
# - Artifact verification and validation
# - Multi-architecture artifact packing
# - Detailed build reporting and summaries
# - Error handling with build log uploads
#
# Outputs:
# - Individual artifacts for each build configuration
# - Packed archive containing all builds organized by architecture and tier
# - Build summaries and statistics
#
# Triggers:
# - Tag pushes (release events)
# - Manual workflow dispatch
# - Push to master branch
# - Pull requests to master branch

on:
  push:
    branches: [main]
    tags:
      - "*"
  pull_request:
    branches: [main]
  # Allow manual trigger from the Actions tab
  workflow_dispatch:

env:
  # Global environment variables
  DEBIAN_FRONTEND: noninteractive
  CCACHE_DIR: ~/.ccache

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu 22.04 CPU Standard build
          - os: ubuntu-22.04
            tier: standard
            arch: cpu
            c_compiler: gcc-11
            cxx_compiler: g++-11
            ubuntu_version: "22"
            artifact_name: radarsimlib_ubuntu22_x86_64_cpu
          # Ubuntu 22.04 CPU Free Tier build
          - os: ubuntu-22.04
            tier: free
            arch: cpu
            c_compiler: gcc-11
            cxx_compiler: g++-11
            ubuntu_version: "22"
            artifact_name: radarsimlib_ubuntu22_x86_64_cpu_free
          # Ubuntu 22.04 GPU Standard build
          - os: ubuntu-22.04
            tier: standard
            arch: gpu
            c_compiler: gcc-11
            cxx_compiler: g++-11
            ubuntu_version: "22"
            artifact_name: radarsimlib_ubuntu22_x86_64_gpu
          # Ubuntu 22.04 GPU Free Tier build
          - os: ubuntu-22.04
            tier: free
            arch: gpu
            c_compiler: gcc-11
            cxx_compiler: g++-11
            ubuntu_version: "22"
            artifact_name: radarsimlib_ubuntu22_x86_64_gpu_free
          # Ubuntu 24.04 CPU Standard build
          - os: ubuntu-24.04
            tier: standard
            arch: cpu
            c_compiler: gcc-13
            cxx_compiler: g++-13
            ubuntu_version: "24"
            artifact_name: radarsimlib_ubuntu24_x86_64_cpu
          # Ubuntu 24.04 CPU Free Tier build
          - os: ubuntu-24.04
            tier: free
            arch: cpu
            c_compiler: gcc-13
            cxx_compiler: g++-13
            ubuntu_version: "24"
            artifact_name: radarsimlib_ubuntu24_x86_64_cpu_free
          # Ubuntu 24.04 GPU Standard build
          - os: ubuntu-24.04
            tier: standard
            arch: gpu
            c_compiler: gcc-13
            cxx_compiler: g++-13
            ubuntu_version: "24"
            artifact_name: radarsimlib_ubuntu24_x86_64_gpu
          # Ubuntu 24.04 GPU Free Tier build
          - os: ubuntu-24.04
            tier: free
            arch: gpu
            c_compiler: gcc-13
            cxx_compiler: g++-13
            ubuntu_version: "24"
            artifact_name: radarsimlib_ubuntu24_x86_64_gpu_free

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.RADARSIMCPP }}
          submodules: recursive
          fetch-depth: 0

      - name: Setup CUDA Toolkit
        if: matrix.arch == 'gpu'
        uses: Jimver/cuda-toolkit@v0.2.27
        with:
          cuda: "13.0.0"
          method: "network"
          sub-packages: '["nvcc"]'
          linux-local-args: '["--toolkit", "--silent"]'

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            ~/.ccache
          key: ${{ runner.os }}-${{ matrix.tier }}-${{ matrix.arch }}-${{ hashFiles('build.sh', 'CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.tier }}-${{ matrix.arch }}-
            ${{ runner.os }}-${{ matrix.tier }}-
            ${{ runner.os }}-

      - name: Install build dependencies
        run: |
          echo "::group::Dependencies Installation"
          sudo apt-get update

          # Install common build dependencies
          sudo apt-get install -y \
            build-essential \
            cmake \
            pkg-config \
            ccache
          
          # Set up ccache
          ccache --set-config=max_size=2G
          ccache --set-config=cache_dir=~/.ccache
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          
          # Verify installations
          ${{ matrix.c_compiler }} --version
          ${{ matrix.cxx_compiler }} --version
          cmake --version
          ccache --version
          echo "::endgroup::"

      - name: Verify CUDA installation
        if: matrix.arch == 'gpu'
        run: |
          echo "::group::CUDA Verification"
          nvcc --version
          echo "CUDA_PATH: $CUDA_PATH"
          echo "PATH: $PATH"
          if [ -d "$CUDA_PATH/bin" ]; then
            ls -la "$CUDA_PATH/bin/" | grep nvcc
          else
            echo "CUDA bin directory not found"
          fi
          if [ -d "$CUDA_PATH/lib64" ]; then
            echo "CUDA lib directory found"
          else
            echo "CUDA lib directory not found"
          fi
          echo "::endgroup::"

      - name: Display build information
        run: |
          echo "::group::Build Information"
          echo "OS: ${{ matrix.os }}"
          echo "Ubuntu Version: ${{ matrix.ubuntu_version }}"
          echo "Tier: ${{ matrix.tier }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "C Compiler: ${{ matrix.c_compiler }}"
          echo "C++ Compiler: ${{ matrix.cxx_compiler }}"
          if [ "${{ matrix.arch }}" == "gpu" ]; then
            nvcc_version=$(nvcc --version | grep "release" | sed 's/.*release \([0-9.]*\).*/\1/')
            echo "CUDA Version: $nvcc_version"
          fi
          echo "::endgroup::"

          echo "::group::System Information"
          lsb_release -a
          uname -a
          nproc
          ${{ matrix.c_compiler }} --version
          ${{ matrix.cxx_compiler }} --version
          if [ "${{ matrix.arch }}" == "gpu" ]; then
            nvcc --version
          fi
          echo "::endgroup::"

      - name: Build RadarSimLib
        env:
          CC: ${{ matrix.c_compiler }}
          CXX: ${{ matrix.cxx_compiler }}
          CUDA_PATH: ${{ matrix.arch == 'gpu' && env.CUDA_PATH || '' }}
          CUDA_HOME: ${{ matrix.arch == 'gpu' && env.CUDA_PATH || '' }}
          CUDACXX: ${{ matrix.arch == 'gpu' && format('{0}/bin/nvcc', env.CUDA_PATH) || '' }}
          CUDA_TOOLKIT_ROOT_DIR: ${{ matrix.arch == 'gpu' && env.CUDA_PATH || '' }}
          CCACHE_COMPILERCHECK: content
        run: |
          echo "::group::Build Process"
          chmod +x ./build.sh
          ./build.sh --arch=${{ matrix.arch }} --tier=${{ matrix.tier }} --test=${{ matrix.tier == 'standard' && matrix.arch == 'cpu' && 'on' || 'off' }} --verbose
          echo "::endgroup::"

      - name: Display build statistics
        if: always()
        run: |
          echo "::group::Build Statistics"
          ccache --show-stats
          echo "::endgroup::"

      - name: Create build summary
        run: |
          echo "## Build Summary 🛠️" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| OS | ${{ matrix.os }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Ubuntu Version | ${{ matrix.ubuntu_version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tier | ${{ matrix.tier }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture | ${{ matrix.arch }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compiler | ${{ matrix.c_compiler }}/${{ matrix.cxx_compiler }} |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ matrix.arch }}" == "gpu" ]; then
            echo "| CUDA Version | $(nvcc --version | grep "release" | sed 's/.*release \([0-9.]*\).*/\1/') |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "| Artifact Name | ${{ matrix.artifact_name }} |" >> $GITHUB_STEP_SUMMARY

      - name: Archive built module
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ matrix.artifact_name }}
          path: ./radarsimlib_ubuntu${{ matrix.ubuntu_version }}_x86_64_${{ matrix.arch }}${{ matrix.tier == 'free' && '_free' || '' }}
          retention-days: 1
          compression-level: 6

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ matrix.artifact_name }}
          path: |
            ./build_logs/
            *.log
          retention-days: 1

  # Pack all artifacts into a single file
  pack-artifacts:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Delete downloaded artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            radarsimlib_ubuntu22_x86_64_cpu*
            radarsimlib_ubuntu22_x86_64_gpu*
            radarsimlib_ubuntu24_x86_64_cpu*
            radarsimlib_ubuntu24_x86_64_gpu*

      - name: Display downloaded artifacts
        run: |
          echo "::group::Downloaded Artifacts"
          find artifacts/ -type f -name "*.so" -o -name "*.h" | head -20
          echo "::endgroup::"

      - name: Create artifact structure
        run: |
          mkdir -p packed/radarsimlib_ubuntu_all

          # Create the directory structure for tier-based archives
          mkdir -p packed/radarsimlib_ubuntu_all/trial
          mkdir -p packed/radarsimlib_ubuntu_all/standard

          # Create temporary directories for organizing files before zipping
          mkdir -p temp/trial/Ubuntu22_x86_64_CPU
          mkdir -p temp/trial/Ubuntu22_x86_64_GPU
          mkdir -p temp/trial/Ubuntu24_x86_64_CPU
          mkdir -p temp/trial/Ubuntu24_x86_64_GPU
          mkdir -p temp/standard/Ubuntu22_x86_64_CPU
          mkdir -p temp/standard/Ubuntu22_x86_64_GPU
          mkdir -p temp/standard/Ubuntu24_x86_64_CPU
          mkdir -p temp/standard/Ubuntu24_x86_64_GPU

          # Copy each artifact to appropriate directory based on architecture and tier
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              echo "Processing artifact: $artifact_name"
              
              # Determine Ubuntu version
              if [[ "$artifact_name" == *"ubuntu22"* ]]; then
                ubuntu_ver="Ubuntu22"
              elif [[ "$artifact_name" == *"ubuntu24"* ]]; then
                ubuntu_ver="Ubuntu24"
              else
                echo "Unknown Ubuntu version for $artifact_name, skipping"
                continue
              fi
              
              # Determine target directory based on artifact name
              if [[ "$artifact_name" == *"gpu"* ]]; then
                # GPU builds
                if [[ "$artifact_name" == *"_free"* ]]; then
                  target_dir="temp/trial/${ubuntu_ver}_x86_64_GPU"
                else
                  target_dir="temp/standard/${ubuntu_ver}_x86_64_GPU"
                fi
              else
                # CPU builds
                if [[ "$artifact_name" == *"_free"* ]]; then
                  target_dir="temp/trial/${ubuntu_ver}_x86_64_CPU"
                else
                  target_dir="temp/standard/${ubuntu_ver}_x86_64_CPU"
                fi
              fi
              
              # Ensure target directory exists
              mkdir -p "$target_dir"
              
              # Copy the library contents
              echo "Copying library from $dir to $target_dir/"
              cp -r "$dir"/* "$target_dir/" 2>/dev/null || true
            fi
          done

          # Create zip files for each tier/architecture combination
          cd temp
          
          # Create zip files in standard directory
          cd standard
          zip -r ../../packed/radarsimlib_ubuntu_all/standard/Ubuntu22_x86_64_CPU.zip Ubuntu22_x86_64_CPU/
          zip -r ../../packed/radarsimlib_ubuntu_all/standard/Ubuntu22_x86_64_GPU.zip Ubuntu22_x86_64_GPU/
          zip -r ../../packed/radarsimlib_ubuntu_all/standard/Ubuntu24_x86_64_CPU.zip Ubuntu24_x86_64_CPU/
          zip -r ../../packed/radarsimlib_ubuntu_all/standard/Ubuntu24_x86_64_GPU.zip Ubuntu24_x86_64_GPU/
          cd ..
          
          # Create zip files in trial directory
          cd trial
          zip -r ../../packed/radarsimlib_ubuntu_all/trial/Ubuntu22_x86_64_CPU.zip Ubuntu22_x86_64_CPU/
          zip -r ../../packed/radarsimlib_ubuntu_all/trial/Ubuntu22_x86_64_GPU.zip Ubuntu22_x86_64_GPU/
          zip -r ../../packed/radarsimlib_ubuntu_all/trial/Ubuntu24_x86_64_CPU.zip Ubuntu24_x86_64_CPU/
          zip -r ../../packed/radarsimlib_ubuntu_all/trial/Ubuntu24_x86_64_GPU.zip Ubuntu24_x86_64_GPU/
          cd ..
          
          cd ..

      - name: Verify artifact structure
        run: |
          echo "::group::Artifact Structure Verification"
          echo "Final directory structure:"
          find packed/radarsimlib_ubuntu_all -type f | sort
          echo ""
          echo "Zip files created:"
          ls -la packed/radarsimlib_ubuntu_all/standard/*.zip packed/radarsimlib_ubuntu_all/trial/*.zip
          echo ""
          echo "Archive sizes:"
          ls -lh packed/radarsimlib_ubuntu_all/standard/*.zip packed/radarsimlib_ubuntu_all/trial/*.zip
          echo "::endgroup::"

      - name: Create README for packed artifacts
        run: |
          cat > packed/radarsimlib_ubuntu_all/README.md << 'EOF'
          # RadarSimLib Ubuntu Build Artifacts

          This archive contains all RadarSimLib builds for Ubuntu platforms organized by tier, version and architecture.

          ## Directory Structure

          The builds are organized in the following structure:

          ```
          standard/
          ├── Ubuntu22_x86_64_CPU.zip
          ├── Ubuntu22_x86_64_GPU.zip
          ├── Ubuntu24_x86_64_CPU.zip
          └── Ubuntu24_x86_64_GPU.zip

          trial/
          ├── Ubuntu22_x86_64_CPU.zip
          ├── Ubuntu22_x86_64_GPU.zip
          ├── Ubuntu24_x86_64_CPU.zip
          └── Ubuntu24_x86_64_GPU.zip
          ```

          ## Zip File Contents

          Each zip file contains the following:
          - `libradarsimc.so` - Shared library
          - `radarsim.h` - Header file for C/C++ integration

          ## Platform and Tier Information

          ### Standard Tier
          - **Ubuntu22_x86_64_CPU.zip**: Full-featured CPU-only build for Ubuntu 22.04 LTS
          - **Ubuntu22_x86_64_GPU.zip**: Full-featured CUDA GPU-accelerated build for Ubuntu 22.04 LTS
          - **Ubuntu24_x86_64_CPU.zip**: Full-featured CPU-only build for Ubuntu 24.04 LTS
          - **Ubuntu24_x86_64_GPU.zip**: Full-featured CUDA GPU-accelerated build for Ubuntu 24.04 LTS

          ### Trial Tier
          - **Ubuntu22_x86_64_CPU.zip**: Limited-feature CPU-only build for Ubuntu 22.04 LTS
          - **Ubuntu22_x86_64_GPU.zip**: Limited-feature CUDA GPU-accelerated build for Ubuntu 22.04 LTS
          - **Ubuntu24_x86_64_CPU.zip**: Limited-feature CPU-only build for Ubuntu 24.04 LTS
          - **Ubuntu24_x86_64_GPU.zip**: Limited-feature CUDA GPU-accelerated build for Ubuntu 24.04 LTS

          ## Build Information

          - **Total Builds**: 8 zip files (2 Ubuntu versions × 2 architectures × 2 tiers)
          - **Ubuntu Versions**: 22.04 LTS (GCC 11), 24.04 LTS (GCC 13)
          - **Architectures**: x86_64 CPU, x86_64 GPU (CUDA)
          - **Tiers**: Standard (full features), Trial (limited features)
          - **Library Type**: Shared library (.so)
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Usage

          1. Choose the appropriate tier (standard or trial) based on your license
          2. Choose the appropriate Ubuntu version for your system
          3. Choose the appropriate architecture (CPU or GPU) for your system
          4. Extract the corresponding zip file
          5. Link against libradarsimc.so and include radarsim.h in your project

          ## Requirements

          ### Ubuntu 22.04 Builds
          - **CPU builds**: Ubuntu 22.04 LTS or newer x86_64 system
          - **GPU builds**: Ubuntu 22.04 LTS or newer x86_64 system with NVIDIA GPU and CUDA support
          - **Compiler**: Built with GCC 11

          ### Ubuntu 24.04 Builds
          - **CPU builds**: Ubuntu 24.04 LTS or newer x86_64 system
          - **GPU builds**: Ubuntu 24.04 LTS or newer x86_64 system with NVIDIA GPU and CUDA support
          - **Compiler**: Built with GCC 13
          EOF

      - name: Create compressed archive
        run: |
          cd packed
          tar -czf radarsimlib_ubuntu_all_builds.tar.gz radarsimlib_ubuntu_all/

          # Create zip version as well
          zip -r radarsimlib_ubuntu_all_builds.zip radarsimlib_ubuntu_all/

          echo "::group::Archive Information"
          ls -lh *.tar.gz *.zip
          echo "::endgroup::"

      - name: Upload packed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: radarsimlib_ubuntu_all_builds
          path: |
            packed/radarsimlib_ubuntu_all_builds.tar.gz
            packed/radarsimlib_ubuntu_all_builds.zip
          retention-days: 1
          compression-level: 0

  # Summary job that runs after all builds complete
  build-summary:
    needs: [build, pack-artifacts]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "# Ubuntu RadarSimLib Build Summary 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "Total builds: 8 (2 Ubuntu versions × 2 architectures × 2 tiers)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Ubuntu Version Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- **Ubuntu 22.04**: 4 builds (2 architectures × 2 tiers)" >> $GITHUB_STEP_SUMMARY
          echo "- **Ubuntu 24.04**: 4 builds (2 architectures × 2 tiers)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Architecture Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- **CPU (x86_64)**: 4 builds (2 Ubuntu versions × 2 tiers)" >> $GITHUB_STEP_SUMMARY
          echo "- **GPU (CUDA)**: 4 builds (2 Ubuntu versions × 2 tiers)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tier Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- **Standard**: 4 builds (2 Ubuntu versions × 2 architectures)" >> $GITHUB_STEP_SUMMARY
          echo "- **Free**: 4 builds (2 Ubuntu versions × 2 architectures)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "#### Ubuntu 22.04" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_ubuntu22_x86_64_cpu\` (Standard CPU)" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_ubuntu22_x86_64_cpu_free\` (Free CPU)" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_ubuntu22_x86_64_gpu\` (Standard GPU)" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_ubuntu22_x86_64_gpu_free\` (Free GPU)" >> $GITHUB_STEP_SUMMARY
          echo "#### Ubuntu 24.04" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_ubuntu24_x86_64_cpu\` (Standard CPU)" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_ubuntu24_x86_64_cpu_free\` (Free CPU)" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_ubuntu24_x86_64_gpu\` (Standard GPU)" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_ubuntu24_x86_64_gpu_free\` (Free GPU)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Packed Artifacts" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.pack-artifacts.result }}" == "success" ]; then
            echo "✅ **All artifacts successfully packed into single archive**" >> $GITHUB_STEP_SUMMARY
            echo "- Archive: \`radarsimlib_ubuntu_all_builds\`" >> $GITHUB_STEP_SUMMARY
            echo "- Formats: tar.gz, zip" >> $GITHUB_STEP_SUMMARY
            echo "- Contains: All 8 build variants organized by Ubuntu version and configuration" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Artifact packing failed or was skipped**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **All builds completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some builds may have failed. Check individual job logs for details.**" >> $GITHUB_STEP_SUMMARY
          fi