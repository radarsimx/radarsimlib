name: Build macOS Libraries

# GitHub Actions workflow for building and packaging RadarSimLib on macOS platforms.
#
# This workflow builds RadarSimLib across multiple macOS versions and build tiers
# (standard/free). It supports both Intel x64 and Apple Silicon ARM64 architectures
# to provide comprehensive macOS coverage.
#
# Build Matrix:
# - macOS 13 (Intel x64): GCC-14 compiler, 2 builds (standard + free)
# - macOS 14 (Apple Silicon ARM64): Clang compiler, 2 builds (standard + free)
# - Build tiers: standard (full features), free (limited features)
# - Total builds: 4
#
# Features:
# - Comprehensive caching (Homebrew, ccache)
# - Build optimization with ccache
# - Xcode version management
# - Artifact verification and validation
# - Multi-architecture artifact packing
# - Detailed build reporting and summaries
# - Error handling with build log uploads
#
# Outputs:
# - Individual artifacts for each build configuration
# - Packed archive containing all builds organized by architecture and tier
# - Build summaries and statistics
#
# Triggers:
# - Tag pushes (release events)
# - Manual workflow dispatch
# - Push to master branch
# - Pull requests to master branch

on:
  push:
    branches: [main]
    tags:
      - "*"
  pull_request:
    branches: [main]
  # Allow manual trigger from the Actions tab
  workflow_dispatch:

env:
  # Global environment variables
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS x64 Standard build
          - os: macos-13
            tier: standard
            arch: x86_64
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            artifact_name: radarsimlib_macos_x86_64_cpu
          # macOS x64 Free Tier build
          - os: macos-13
            tier: free
            arch: x86_64
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            artifact_name: radarsimlib_macos_x86_64_cpu_free
          # macOS ARM64 (Apple Silicon) Standard build
          - os: macos-15
            tier: standard
            arch: arm64
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            artifact_name: radarsimlib_macos_arm64_cpu
          # macOS ARM64 (Apple Silicon) Free Tier build
          - os: macos-15
            tier: free
            arch: arm64
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            artifact_name: radarsimlib_macos_arm64_cpu_free

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.RADARSIMCPP }}
          submodules: recursive
          fetch-depth: 0

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: ${{ matrix.xcode_version }}

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            ~/.ccache
          key: ${{ runner.os }}-${{ matrix.os }}-${{ matrix.tier }}-${{ matrix.arch }}-${{ hashFiles('build.sh', 'CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-${{ matrix.tier }}-${{ matrix.arch }}-
            ${{ runner.os }}-${{ matrix.os }}-${{ matrix.tier }}-
            ${{ runner.os }}-${{ matrix.os }}-

      - name: Install system dependencies
        run: |
          # Install ccache for faster compilation
          brew install ccache
          echo "$(brew --prefix ccache)/bin" >> $GITHUB_PATH

          # Set up ccache
          ccache --set-config=max_size=2G
          ccache --set-config=cache_dir=~/.ccache

      - name: Display build information
        run: |
          echo "::group::Build Information"
          echo "OS: ${{ matrix.os }}"
          echo "Tier: ${{ matrix.tier }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "C Compiler: ${{ matrix.c_compiler }}"
          echo "C++ Compiler: ${{ matrix.cxx_compiler }}"
          echo "Xcode Version: ${{ matrix.xcode_version }}"
          echo "::endgroup::"

          echo "::group::System Information"
          uname -a
          sw_vers
          xcodebuild -version
          ${{ matrix.c_compiler }} --version
          ${{ matrix.cxx_compiler }} --version
          sysctl -n hw.ncpu
          echo "::endgroup::"

      - name: Build RadarSimLib
        env:
          CC: ${{ matrix.c_compiler }}
          CXX: ${{ matrix.cxx_compiler }}
          CCACHE_DIR: ~/.ccache
          CCACHE_COMPILERCHECK: content
        run: |
          echo "::group::Build Process"
          chmod +x ./build.sh
          ./build.sh --arch=cpu --tier=${{ matrix.tier }} --test=${{ matrix.tier == 'standard' && matrix.arch == 'x86_64' && 'on' || 'off' }} --verbose
          echo "::endgroup::"

      - name: Display build statistics
        if: always()
        run: |
          echo "::group::Build Statistics"
          ccache --show-stats
          echo "::endgroup::"

      - name: Create build summary
        run: |
          echo "## Build Summary 🛠️" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| OS | ${{ matrix.os }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tier | ${{ matrix.tier }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture | ${{ matrix.arch }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compiler | ${{ matrix.c_compiler }}/${{ matrix.cxx_compiler }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Xcode Version | ${{ matrix.xcode_version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact Name | ${{ matrix.artifact_name }} |" >> $GITHUB_STEP_SUMMARY

      - name: Archive built module
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ matrix.artifact_name }}
          path: ./radarsimlib_macos_${{ matrix.arch }}_cpu${{ matrix.tier == 'free' && '_free' || '' }}
          retention-days: 1
          compression-level: 6

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ matrix.artifact_name }}
          path: |
            ./build_logs/
            *.log
          retention-days: 1

  # Pack all artifacts into a single file
  pack-artifacts:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Delete downloaded artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            radarsimlib_macos_x86_64_cpu*
            radarsimlib_macos_arm64_cpu*

      - name: Display downloaded artifacts
        run: |
          echo "::group::Downloaded Artifacts"
          find artifacts/ -type f -name "*.dylib" -o -name "*.h" | head -20
          echo "::endgroup::"

      - name: Create artifact structure
        run: |
          mkdir -p packed/radarsimlib_macos_all

          # Create the directory structure
          mkdir -p packed/radarsimlib_macos_all/trial/MacOS_x86_64_CPU
          mkdir -p packed/radarsimlib_macos_all/standard/MacOS_x86_64_CPU
          mkdir -p packed/radarsimlib_macos_all/trial/MacOS_ARM64_CPU
          mkdir -p packed/radarsimlib_macos_all/standard/MacOS_ARM64_CPU

          # Copy each artifact to appropriate directory based on architecture and tier
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              echo "Processing artifact: $artifact_name"
              
              # Determine target directory based on artifact name
              if [[ "$artifact_name" == *"arm64"* ]]; then
                # ARM64 builds
                if [[ "$artifact_name" == *"_free"* ]]; then
                  target_dir="packed/radarsimlib_macos_all/trial/MacOS_ARM64_CPU"
                else
                  target_dir="packed/radarsimlib_macos_all/standard/MacOS_ARM64_CPU"
                fi
              else
                # x64 builds
                if [[ "$artifact_name" == *"_free"* ]]; then
                  target_dir="packed/radarsimlib_macos_all/trial/MacOS_x86_64_CPU"
                else
                  target_dir="packed/radarsimlib_macos_all/standard/MacOS_x86_64_CPU"
                fi
              fi
              
              # Ensure target directory exists
              mkdir -p "$target_dir"
              
              # Copy the library contents
              echo "Copying library from $dir to $target_dir/"
              cp -r "$dir"/* "$target_dir/" 2>/dev/null || true
            fi
          done

      - name: Verify artifact structure
        run: |
          echo "::group::Artifact Structure Verification"
          echo "Final directory structure:"
          find packed/radarsimlib_macos_all -type d | sort
          echo ""
          echo "Files in each directory:"
          for dir in packed/radarsimlib_macos_all/*/MacOS_*; do
            if [ -d "$dir" ]; then
              echo "Contents of $dir:"
              ls -la "$dir" || echo "Directory is empty or doesn't exist"
              echo ""
            fi
          done
          echo "::endgroup::"

      - name: Create README for packed artifacts
        run: |
          cat > packed/radarsimlib_macos_all/README.md << 'EOF'
          # RadarSimLib MacOS Build Artifacts

          This archive contains all RadarSimLib builds for macOS platforms organized by architecture and tier.

          ## Directory Structure

          The builds are organized in the following structure:

          ```
          standard/
          ├── MacOS_x86_64_CPU/
          │   ├── libradarsimc.dylib
          │   └── radarsim.h
          └── MacOS_ARM64_CPU/
              ├── libradarsimc.dylib
              └── radarsim.h

          trial/
          ├── MacOS_x86_64_CPU/
          │   ├── libradarsimc.dylib
          │   └── radarsim.h
          └── MacOS_ARM64_CPU/
              ├── libradarsimc.dylib
              └── radarsim.h
          ```

          ## Architecture and Tier Information

          ### MacOS_x86_64_CPU (Intel-based Macs)
          - **standard/**: Full-featured builds with all capabilities
          - **trial/**: Free tier builds with limited features
          - Built on macOS 13 with GCC 14 compiler

          ### MacOS_ARM64_CPU (Apple Silicon Macs)
          - **standard/**: Full-featured builds with all capabilities  
          - **trial/**: Free tier builds with limited features
          - Built on macOS 14 with Clang compiler

          ## Build Information

          - **Total Builds**: 4
          - **Architectures**: x86_64 (Intel), ARM64 (Apple Silicon)
          - **Tiers**: Standard (full features), Trial (limited features)
          - **Library Type**: Dynamic library (.dylib)
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Usage

          1. Choose the appropriate architecture directory for your Mac
          2. Choose between standard or trial tier based on your needs
          3. Link against libradarsimc.dylib and include radarsim.h in your project
          EOF

      - name: Create compressed archive
        run: |
          cd packed
          tar -czf radarsimlib_macos_all_builds.tar.gz radarsimlib_macos_all/

          # Create zip version as well
          zip -r radarsimlib_macos_all_builds.zip radarsimlib_macos_all/

          echo "::group::Archive Information"
          ls -lh *.tar.gz *.zip
          echo "::endgroup::"

      - name: Upload packed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: radarsimlib_macos_all_builds
          path: |
            packed/radarsimlib_macos_all_builds.tar.gz
            packed/radarsimlib_macos_all_builds.zip
          retention-days: 1
          compression-level: 0

  # Summary job that runs after all builds complete
  build-summary:
    needs: [build, pack-artifacts]
    runs-on: macos-latest
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "# macOS RadarSimLib Build Summary 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "Total builds: 4 (2 architectures × 2 tiers)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Architecture Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- **x86_64 (Intel)**: 2 builds on macos-13" >> $GITHUB_STEP_SUMMARY
          echo "- **ARM64 (Apple Silicon)**: 2 builds on macos-14" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tier Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- **Standard**: 2 builds (x86_64 + ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "- **Free**: 2 builds (x86_64 + ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_macos_x86_64_cpu\` (Standard x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_macos_x86_64_cpu_free\` (Free x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_macos_arm64_cpu\` (Standard ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "- \`radarsimlib_macos_arm64_cpu_free\` (Free ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Packed Artifacts" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.pack-artifacts.result }}" == "success" ]; then
            echo "✅ **All artifacts successfully packed into single archive**" >> $GITHUB_STEP_SUMMARY
            echo "- Archive: \`radarsimlib_macos_all_builds\`" >> $GITHUB_STEP_SUMMARY
            echo "- Formats: tar.gz, zip" >> $GITHUB_STEP_SUMMARY
            echo "- Contains: All 4 build variants organized by configuration" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Artifact packing failed or was skipped**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **All builds completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some builds may have failed. Check individual job logs for details.**" >> $GITHUB_STEP_SUMMARY
          fi
