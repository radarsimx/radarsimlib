name: Build Windows Libraries

# GitHub Actions workflow for building and packaging RadarSimLib on Windows platforms.
#
# This workflow builds RadarSimLib across different build tiers (standard/free)
# and architectures (CPU/GPU). It provides comprehensive Windows coverage with
# both CPU-only and CUDA GPU-accelerated builds.
#
# Build Matrix:
# - Windows Latest: MSVC compiler, 4 builds (2 architectures × 2 tiers)
# - Architectures: CPU (x86_64), GPU (CUDA)
# - Build tiers: standard (full features), free (limited features)
# - Total builds: 4
#
# Features:
# - CUDA toolkit setup for GPU builds
# - Build optimization and caching
# - Artifact verification and validation2
# - Multi-architecture artifact packing
# - Detailed build reporting and summaries
# - Error handling with build log uploads
#
# Outputs:
# - Individual artifacts for each build configuration
# - Packed archive containing all builds organized by architecture and tier
# - Build summaries and statistics
#
# Triggers:
# - Tag pushes (release events)
# - Manual workflow dispatch
# - Push to master branch
# - Pull requests to master branch

on:
  push:
    branches: [main]
    tags:
      - "*"
  pull_request:
    branches: [main]
  # Allow manual trigger from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2025
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows CPU Standard build
          - tier: standard
            arch: cpu
            artifact_name: radarsimlib_win_x86_64_cpu
          # Windows CPU Free Tier build
          - tier: free
            arch: cpu
            artifact_name: radarsimlib_win_x86_64_cpu_free
          # Windows GPU Standard build
          - tier: standard
            arch: gpu
            artifact_name: radarsimlib_win_x86_64_gpu
          # Windows GPU Free Tier build
          - tier: free
            arch: gpu
            artifact_name: radarsimlib_win_x86_64_gpu_free

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.RADARSIMCPP }}
          submodules: recursive
          fetch-depth: 0

      - name: Setup CUDA Toolkit
        if: matrix.arch == 'gpu'
        uses: N-Storm/cuda-toolkit@v0.2.27m
        with:
          cuda: '13.0.0'
          method: 'local'
          use-github-cache: false

      - name: Verify CUDA installation
        if: matrix.arch == 'gpu'
        run: |
          echo "::group::CUDA Verification"
          nvcc --version
          echo "CUDA_PATH: %CUDA_PATH%"
          echo "PATH: %PATH%"
          if exist "%CUDA_PATH%\bin\" (
            dir "%CUDA_PATH%\bin\" | findstr nvcc
          ) else (
            echo "CUDA bin directory not found"
          )
          if exist "%CUDA_PATH%\lib\x64\" (
            echo "CUDA lib directory found"
          ) else (
            echo "CUDA lib directory not found"
          )
          echo "::endgroup::"
        shell: cmd

      - name: Display build information
        run: |
          echo "::group::Build Information"
          echo "OS: windows-latest"
          echo "Tier: ${{ matrix.tier }}"
          echo "Architecture: ${{ matrix.arch }}"
          if "${{ matrix.arch }}" == "gpu" (
            echo "CUDA Version: $(nvcc --version | findstr "release" | for /f "tokens=5" %%a in ('findstr "release"') do echo %%a)"
          )
          echo "::endgroup::"

          echo "::group::System Information"
          systeminfo | findstr /C:"OS Name" /C:"OS Version"
          if "${{ matrix.arch }}" == "gpu" (
            nvcc --version
          )
          echo "::endgroup::"
        shell: cmd

      - name: Build RadarSimLib
        env:
          CUDA_PATH: ${{ matrix.arch == 'gpu' && env.CUDA_PATH || '' }}
          CUDA_HOME: ${{ matrix.arch == 'gpu' && env.CUDA_PATH || '' }}
          CUDACXX: ${{ matrix.arch == 'gpu' && format('{0}\bin\nvcc.exe', env.CUDA_PATH) || '' }}
          CUDA_TOOLKIT_ROOT_DIR: ${{ matrix.arch == 'gpu' && env.CUDA_PATH || '' }}
        run: |
          echo "::group::Build Process"
          .\build.bat --arch=${{ matrix.arch }} --tier=${{ matrix.tier }} --test=${{ matrix.tier == 'standard' && matrix.arch == 'cpu' && 'on' || 'off' }}
          echo "::endgroup::"
        shell: cmd

      - name: Create build summary
        run: |
          echo "## Build Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $env:GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $env:GITHUB_STEP_SUMMARY
          echo "| OS | windows-latest |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Tier | ${{ matrix.tier }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Architecture | ${{ matrix.arch }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Artifact Name | ${{ matrix.artifact_name }} |" >> $env:GITHUB_STEP_SUMMARY
        shell: powershell

      - name: Archive built module
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ matrix.artifact_name }}
          path: .\radarsimlib_win_x86_64_${{ matrix.arch }}${{ matrix.tier == 'free' && '_free' || '' }}
          retention-days: 1
          compression-level: 6

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ matrix.artifact_name }}
          path: |
            .\build_logs\
            *.log
          retention-days: 1

  # Pack all artifacts into a single file
  pack-artifacts:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Delete downloaded artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            radarsimlib_win_x86_64_cpu*
            radarsimlib_win_x86_64_gpu*

      - name: Display downloaded artifacts
        run: |
          echo "::group::Downloaded Artifacts"
          find artifacts/ -type f -name "*.dll" -o -name "*.h" -o -name "*.lib" | head -20
          echo "::endgroup::"

      - name: Create artifact structure
        run: |
          mkdir -p packed/radarsimlib_windows_all

          # Create the directory structure for full archive
          mkdir -p packed/radarsimlib_windows_all/trial
          mkdir -p packed/radarsimlib_windows_all/standard

          # Create temporary directories for organizing files before zipping
          mkdir -p temp/trial/Windows_x86_64_CPU
          mkdir -p temp/trial/Windows_x86_64_GPU
          mkdir -p temp/standard/Windows_x86_64_CPU
          mkdir -p temp/standard/Windows_x86_64_GPU

          # Copy each artifact to appropriate directory based on architecture and tier
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              echo "Processing artifact: $artifact_name"
              
              # Determine target directory based on artifact name
              if [[ "$artifact_name" == *"gpu"* ]]; then
                # GPU builds
                if [[ "$artifact_name" == *"_free"* ]]; then
                  target_dir="temp/trial/Windows_x86_64_GPU"
                else
                  target_dir="temp/standard/Windows_x86_64_GPU"
                fi
              else
                # CPU builds
                if [[ "$artifact_name" == *"_free"* ]]; then
                  target_dir="temp/trial/Windows_x86_64_CPU"
                else
                  target_dir="temp/standard/Windows_x86_64_CPU"
                fi
              fi
              
              # Ensure target directory exists
              mkdir -p "$target_dir"
              
              # Copy the library contents
              echo "Copying library from $dir to $target_dir/"
              cp -r "$dir"/* "$target_dir/" 2>/dev/null || true
            fi
          done

          # Create zip files for each tier/architecture combination
          cd temp
          
          # Create zip files in standard directory
          cd standard
          zip -r ../../packed/radarsimlib_windows_all/standard/Windows_x86_64_CPU.zip Windows_x86_64_CPU/
          zip -r ../../packed/radarsimlib_windows_all/standard/Windows_x86_64_GPU.zip Windows_x86_64_GPU/
          cd ..
          
          # Create zip files in trial directory
          cd trial
          zip -r ../../packed/radarsimlib_windows_all/trial/Windows_x86_64_CPU.zip Windows_x86_64_CPU/
          zip -r ../../packed/radarsimlib_windows_all/trial/Windows_x86_64_GPU.zip Windows_x86_64_GPU/
          cd ..
          
          cd ..

      - name: Verify artifact structure
        run: |
          echo "::group::Artifact Structure Verification"
          echo "Final directory structure:"
          find packed/radarsimlib_windows_all -type f | sort
          echo ""
          echo "Zip files created:"
          ls -la packed/radarsimlib_windows_all/standard/*.zip packed/radarsimlib_windows_all/trial/*.zip
          echo ""
          echo "Archive sizes:"
          ls -lh packed/radarsimlib_windows_all/standard/*.zip packed/radarsimlib_windows_all/trial/*.zip
          echo "::endgroup::"

      - name: Create README for packed artifacts
        run: |
          cat > packed/radarsimlib_windows_all/README.md << 'EOF'
          # RadarSimLib Windows Build Artifacts

          This archive contains all RadarSimLib builds for Windows platforms organized by tier and architecture.

          ## Directory Structure

          The builds are organized in the following structure:

          ```
          standard/
          ├── Windows_x86_64_CPU.zip
          └── Windows_x86_64_GPU.zip

          trial/
          ├── Windows_x86_64_CPU.zip
          └── Windows_x86_64_GPU.zip
          ```

          ## Zip File Contents

          Each zip file contains the following:
          - `radarsimc.dll` - Dynamic library
          - `radarsimc.lib` - Import library for linking
          - `radarsim.h` - Header file for C/C++ integration

          ## Architecture and Tier Information

          ### Standard Tier
          - **Windows_x86_64_CPU.zip**: Full-featured CPU-only build
          - **Windows_x86_64_GPU.zip**: Full-featured CUDA GPU-accelerated build

          ### Trial Tier
          - **Windows_x86_64_CPU.zip**: Limited-feature CPU-only build
          - **Windows_x86_64_GPU.zip**: Limited-feature CUDA GPU-accelerated build

          ## Build Information

          - **Total Builds**: 4 zip files (2 architectures × 2 tiers)
          - **Architectures**: x86_64 CPU, x86_64 GPU (CUDA)
          - **Tiers**: Standard (full features), Trial (limited features)
          - **Library Type**: Dynamic library (.dll) with import library (.lib)
          - **Compiler**: MSVC
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Usage

          1. Choose the appropriate tier (standard or trial) based on your license
          2. Choose the appropriate architecture (CPU or GPU) for your system
          3. Extract the corresponding zip file
          4. Link against radarsimc.lib and include radarsim.h in your project
          5. Ensure radarsimc.dll is accessible at runtime

          ## Requirements

          ### CPU Builds (Windows_x86_64_CPU.zip)
          - Any x86_64 Windows system
          - Microsoft Visual C++ Redistributable

          ### GPU Builds (Windows_x86_64_GPU.zip)
          - x86_64 Windows system with NVIDIA GPU
          - CUDA 12.8.1 or compatible version
          - Microsoft Visual C++ Redistributable
          EOF

      - name: Create compressed archive
        run: |
          cd packed
          tar -czf radarsimlib_windows_all_builds.tar.gz radarsimlib_windows_all/

          # Create zip version as well
          zip -r radarsimlib_windows_all_builds.zip radarsimlib_windows_all/

          echo "::group::Archive Information"
          ls -lh *.tar.gz *.zip
          echo "::endgroup::"

      - name: Upload packed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: radarsimlib_windows_all_builds
          path: |
            packed/radarsimlib_windows_all_builds.tar.gz
            packed/radarsimlib_windows_all_builds.zip
          retention-days: 1
          compression-level: 0

  # Summary job that runs after all builds complete
  build-summary:
    needs: [build, pack-artifacts]
    runs-on: windows-latest
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "# Windows RadarSimLib Build Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "## Build Matrix Results" >> $env:GITHUB_STEP_SUMMARY
          echo "Total builds: 4 - 2 architectures x 2 tiers" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Architecture Distribution" >> $env:GITHUB_STEP_SUMMARY
          echo "- **CPU x86_64**: 2 builds on windows-latest" >> $env:GITHUB_STEP_SUMMARY
          echo "- **GPU CUDA**: 2 builds on windows-latest" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Tier Distribution" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Standard**: 2 builds - CPU and GPU" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Free**: 2 builds - CPU and GPU" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Artifacts Generated" >> $env:GITHUB_STEP_SUMMARY
          echo "- ``radarsimlib_win_x86_64_cpu`` - Standard CPU" >> $env:GITHUB_STEP_SUMMARY
          echo "- ``radarsimlib_win_x86_64_cpu_free`` - Free CPU" >> $env:GITHUB_STEP_SUMMARY
          echo "- ``radarsimlib_win_x86_64_gpu`` - Standard GPU" >> $env:GITHUB_STEP_SUMMARY
          echo "- ``radarsimlib_win_x86_64_gpu_free`` - Free GPU" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Packed Artifacts" >> $env:GITHUB_STEP_SUMMARY
          if ("${{ needs.pack-artifacts.result }}" -eq "success") {
            echo "**All artifacts successfully packed into single archive**" >> $env:GITHUB_STEP_SUMMARY
            echo "- Archive: ``radarsimlib_windows_all_builds``" >> $env:GITHUB_STEP_SUMMARY
            echo "- Formats: tar.gz, zip" >> $env:GITHUB_STEP_SUMMARY
            echo "- Contains: All 4 build variants organized by tier and architecture" >> $env:GITHUB_STEP_SUMMARY
          } else {
            echo "**Artifact packing failed or was skipped**" >> $env:GITHUB_STEP_SUMMARY
          }
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $env:GITHUB_STEP_SUMMARY
          if ("${{ needs.build.result }}" -eq "success") {
            echo "**All builds completed successfully!**" >> $env:GITHUB_STEP_SUMMARY
          } else {
            echo "**Some builds may have failed. Check individual job logs for details.**" >> $env:GITHUB_STEP_SUMMARY
          }
        shell: powershell
